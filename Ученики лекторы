class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
        
    def rate_l(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in lecturer.courses_attached and course in self.courses_in_progress:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
                return "Ошибка"
        
    def __str__(self):
        print(f"Имя: {self.name}")
        print(f"Фамилия: {self.surname}")
        print(f"Средняя оценка: {self.average()}")
        print(f"Курсы в процессе: {self.courses_in_progress}")
        print(f"Законченные курсы: {self.finished_courses}")
    
        
    def average(self):
            grade_list = []
            for x in self.grades.values():
                result = sum(x) / len(x)
            return result    

            
class Examples:
    items:list = []
    # itemsl:list = []
    
    def add(self,instance):
        if isinstance(instance, Student):
            self.items.append(instance)
        elif isinstance(instance, Lecturer):
            self.itemsl.append(instance)
            
    def get(self,index):
        return items[index]
    
    def get_items(self):
        return self.items
            
      
    
class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []
        
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'
        
class Lecturer(Mentor):
        def __init__(self, name, surname):
            self.name = name
            self.surname = surname
            self.grades = {}
            self.courses_attached = []
            
        def __str__(self):
            print(f"Имя: {self.name}")
            print(f"Фамилия: {self.surname}")
            print(f"Средняя оценка: {self.average()}")
            
            
        def average(self):
            grade_list = []
            for x in self.grades.values():
                result = sum(x) / len(x)
            return result

              
                 
class Reviewer(Mentor):
    def __str__(self):
        print(f"Имя: {self.name}")
        print(f"Фамилия: {self.surname}")
        
 
fixture = [
    {
        "name" : "Ruoy",
        "surname" : "Eman",
        "gender" : "male"
    },
    {
        "name" :  "Mark",
        "surname" : "Eman",
        "gender": " male"
    }
 ]
date=[]
for items in fixture:
    print(items)
    name, surname, gender = items.values()
    date.append(Student(name,surname,gender))
print(date)
# student_1 = Student('Ruoy', 'Eman', 'your_gender')
# student_1.courses_in_progress += ['Python','Git']
# student_1.finished_courses += ["Основы программирования"]

# student_2 = Student('Mark','Baston','male')
# student_2.courses_in_progress += ['Python','Java']
 
students = Examples()
# students.add(student_1)
# students.add(student_2)
# print(students.itemss)

# for i in students.get_items:
#     print(i)

 
# reviewer_1 = Reviewer('Some', 'Buddy')
# reviewer_1.courses_attached += ['Python']

# lecturer_1 = Lecturer("Some", "Body")
# lecturer_1.courses_attached += ["Python"]

# lecturer_2 = Lecturer('Alex', 'Vlasov')
# lecturer_2.courses_attached += ["Python"]
 
# reviewer_1.rate_hw(student_1, 'Python', 10)
# reviewer_1.rate_hw(student_1, 'Python', 5)
# reviewer_1.rate_hw(student_2, 'Python', 3)

# student_1.rate_l(lecturer_1, 'Python', 10)
# student_1.rate_l(lecturer_2, 'Python', 2)
# student_2.rate_l(lecturer_1, 'Python', 3)
# student_2.rate_l(lecturer_2, 'Python', 6)

 
# print(best_student.grades)
# print(cool_lecturer.grades)

# reviewer_1.__str__()
# student_1.__str__()

